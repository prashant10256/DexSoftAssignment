<!-- views/users.ejs -->

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>User List</title>
    <!-- Add Bootstrap CSS link -->
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
    />
  </head>
  <body>
    <div class="container mt-5">
      <nav class="navbar navbar-light bg-light my-2">
        <a class="navbar-brand" href="#">
      <h1>User List</h1>
       </a>
       <button type="button" onclick="redirectToRegister()" class="btn btn-success" >Register</button>
       <!-- <button onclick="location.href = 'www.yo'" id="myButton" class="float-left submit-button" >Home</button> -->
      </nav>
      
      <div class="d-flex flex-wrap" id="userList">
        <!-- User cards will be dynamically added here using JavaScript -->
      </div>
      <div class="row d-none" id="noUsers">
        <!-- Display "No users" message when there are no users -->
        <div class="col-md-12">
          <p>No users</p>
        </div>
      </div>
      <div class="row" id="loadingUsers">
        <!-- Display "No users" message when there are no users -->
        <div class="col-md-12">
          <p>Loading</p>
        </div>
      </div>
    </div>

    <!-- Add Bootstrap and jQuery scripts -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>

      function redirectToRegister()
      {
        window.location.replace("https://prashant-quadb-test1-b94acfd6ce14.herokuapp.com/Register");
      }
      // Function to create a user card element
      function createUserCard(user) {
        const card = document.createElement("div");
        card.classList.add("col-md-4", "mb-4");

        card.innerHTML = `
        <div class="card border border-dark">
          <img src="data:image/jpeg;base64, ${user.user_image}" class="card-img-top" alt="User Image" style=" width: 100%;
    height: 20vw;
    object-fit: cover;">
          <div class="card-body">
            <h5 class="card-title">${user.user_name}</h5>
            <p class="card-text">Email: ${user.user_email}</p>
            <p class="card-text">Total Orders: ${user.total_orders}</p>
            <div class= "d-flex flex-column">
              <div class="mb-3 d-flex justify-content-start">
            <button class="btn btn-danger mx-2" onclick="deleteUser('${user._id}')">Delete</button>
            <button class="btn btn-warning" onclick="editUser('${user._id}')">Edit</button>
            </div>
            <div class="mb-3 d-flex justify-content-start">
            <label for="imageInput" class="btn btn-primary mx-2" onclick="viewImage('${user._id}')">View Image</label>
          <input type="file" id="imageInput${user._id}" style="display: none;">
          <label for="imageInput${user._id}" class="btn btn-primary" onclick="updateImage('${user._id}')">Update Image</label>
          </div>
          </div>
          </div>
        </div>
      `;

        return card;
      }

      // Function to fetch the user list from the server
      async function fetchUserList() {
        try {
          const loading = document.getElementById("loadingUsers");
          loading.classList.remove("d-none");
          const response = await fetch("/api/details"); // Replace with your API endpoint
          if (response.ok) {
            const usersData = await response.json();

            const userList = document.getElementById("userList");
            const noUsers = document.getElementById("noUsers");
            loading.classList.add("d-none");

            if (usersData.length === 0) {
              // Display "No users" message
              noUsers.classList.remove("d-none");
            } else {
              noUsers.classList.add("d-none");
              // Display user cards
              usersData.forEach((user) => {
                const userCard = createUserCard(user);
                userList.appendChild(userCard);
              });
            }
          } else {
            console.error("Failed to fetch user list");
          }
        } catch (error) {
          console.error(error);
        }
      }

      async function deleteUser(userId) {
        if (confirm("Are you sure you want to delete this user?")) {
          try {
            const response = await fetch(`/api/delete/${userId}`, {
              method: "DELETE",
            });

            if (response.ok) {
              // Reload the page after successful deletion
              location.reload();
            } else {
              alert("Failed to delete user");
            }
          } catch (error) {
            console.error(error);
            alert("An error occurred while deleting the user");
          }
        }
      }


      async function viewImage(userId) {
    
          try {
            const response = await fetch(`/api/image/${userId}`, {
              method: "GET",
            });
           const data = await response.json()
           console.log(data)

            if (response.ok) {
              // Reload the page after successful deletion
              var image = new Image();
              image.src = "data:image/jpg;base64," + data.image;

              var w = window.open("");
              w.document.write(image.outerHTML);
            } else {
              alert("Failed to delete user");
            }
          } catch (error) {
            console.error(error);
            alert("An error occurred while deleting the user");
          }
        
      }

      // Function to handle image update
      function updateImage(userId) {
        const fileInput = document.getElementById(`imageInput${userId}`);
        fileInput.addEventListener("change", async () => {
          const imageFile = fileInput.files[0];
          if (!imageFile) return;

          const reader = new FileReader();
          reader.onload = async () => {
            const user_image = reader.result.split(",")[1]; // Extract base64 data

            try {
              const response = await fetch(`/api/updateimage/${userId}`, {
                method: "PTU",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({ user_image: user_image }),
              });

              if(response.status == 401){
                  
                  window.location.replace("https://prashant-quadb-test1-b94acfd6ce14.herokuapp.com/");
  
              }

              if (response.ok) {
                // Reload the page after successful image update
                location.reload();
              } else {
                alert("Failed to update user image");
              }
            } catch (error) {
              console.error(error);
              alert("An error occurred while updating the user image");
            }
          };

          reader.readAsDataURL(imageFile);
        });

        // Trigger the file input dialog
      }
      // Call the fetchUserList function when the page loads

      function editUser(userId) {
        // Hide all user cards
        const userCards = document.querySelectorAll(".card");
        k = [];
        userCards.forEach((card) => {
          card.style.display = "none";
          k.push(card);
        });

        // Fetch the user data for the selected user
        const userCard = k.find(
          (card) =>
            card.querySelector("button.btn-warning").getAttribute("onclick") ===`editUser('${userId}')`
        );
        const userName = userCard.querySelector(".card-title").textContent;
        const userEmail = userCard
          .querySelector(".card-text:nth-child(2)")
          .textContent.replace("Email: ", "");
        const totalOrders = userCard
          .querySelector(".card-text:nth-child(3)")
          .textContent.replace("Total Orders: ", "");

        // Create an edit form with pre-filled data
        const editForm = document.createElement("form");
        editForm.innerHTML = `
    <div class="form-group">
      <label for="editUserName">Name</label>
      <input type="text" class="form-control" id="editUserName" value="${userName}">
    </div>
    <div class="form-group">
      <label for="editUserEmail">Email</label>
      <input type="email" class="form-control" id="editUserEmail" value="${userEmail}">
    </div>
    <div class="form-group">
      <label for="editTotalOrders">Total Orders</label>
      <input type="number" class="form-control" id="editTotalOrders" value="${totalOrders}">
    </div>
    <div class="form-group">
      <label for="editTotalOrders">Total Orders</label>
      <input type="number" class="form-control" id="editTotalOrders" value="${totalOrders}">
    </div>
    <button type="button" class="btn btn-success" onclick="updateUser('${userId}')">Save</button>
    <button type="button" class="btn btn-secondary" onclick="cancelEdit()">Cancel</button>
  `;

        // Append the edit form to the container
        const userList = document.getElementById("userList");
        userList.appendChild(editForm);
      }

      function cancelEdit() {
        // Show all user cards again
        const userCards = document.querySelectorAll(".card");
        userCards.forEach((card) => {
          card.style.display = "block";
        });

        // Remove the edit form
        const editForm = document.querySelector("form");
        if (editForm) {
          editForm.remove();
        }
      }
      async function updateUser(userId) {
        const editForm = document.querySelector("form");
        const editUserName = editForm.querySelector("#editUserName").value;
        const editUserEmail = editForm.querySelector("#editUserEmail").value;
        const editTotalOrders =
          editForm.querySelector("#editTotalOrders").value;

        const user_image = ""; // Update this with the image data if needed

        const updatedUser = {
          user_name: editUserName,
          user_email: editUserEmail,
          total_orders: editTotalOrders,
          user_image: user_image,
        };

        try {
          const response = await fetch(`/api/update/${userId}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(updatedUser),
          });

          if (response.ok) {
            // Reload the page after successful update
            location.reload();
          } else {
            alert("Failed to update user");
          }
        } catch (error) {
          console.error(error);
          alert("An error occurred while updating the user");
        }
      }

      window.addEventListener("load", fetchUserList);
    </script>
  </body>
</html>
